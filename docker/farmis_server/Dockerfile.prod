# ###########
# # BUILDER #
# ###########

# # pull official base image
# ARG PYTHON_VERSION=3.11.5
# FROM python:${PYTHON_VERSION}-slim as builder

# # Prevents Python from writing pyc files.
# ENV PYTHONDONTWRITEBYTECODE=1

# # Keeps Python from buffering stdout and stderr to avoid situations where
# # the application crashes without emitting any logs due to buffering.
# ENV PYTHONUNBUFFERED=1

# # set work directory
# WORKDIR /app

# # Download dependencies as a separate step to take advantage of Docker's caching.
# # Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# # Leverage a bind mount to requirements.txt to avoid having to copy them into
# # into this layer.
# RUN apt-get update && apt-get install -y --no-install-recommends gcc
# RUN pip install --upgrade pip
# RUN --mount=type=cache,target=/root/.cache/pip \
#     --mount=type=bind,source=./farmis_server/requirements.txt,target=requirements.txt \
#     python -m pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements.txt

    
# # Copy the source code into the container.
# COPY ./farmis_server .

# ###########
# # FINAL #
# ###########

# # pull official base image
# FROM python:${PYTHON_VERSION}-slim

# # create directory for the app user
# RUN mkdir -p /home/app

# # Create a non-privileged user that the app will run under.
# # See https://docs.docker.com/go/dockerfile-user-best-practices/
# ARG UID=10001
# RUN addgroup --system appgroup && adduser \
#     --system \
#     --group \
#     --disabled-password \
#     --gecos "" \
#     --home "/nonexistent" \
#     --shell "/sbin/nologin" \
#     --no-create-home \
#     --uid "${UID}" \
#     appuser

# # create the appropriate directories
# ENV HOME=/home/app
# ENV APP_HOME=/home/app/web
# RUN mkdir ${APP_HOME}
# RUN mkdir ${APP_HOME}/staticfiles
# RUN mkdir ${APP_HOME}/mediafiles
# WORKDIR ${APP_HOME}

# # install dependencies
# RUN apt-get update && apt-get install -y --no-install-recommends netcat-openbsd
# COPY --from=builder /app/wheels /wheels
# COPY --from=builder /app/requirements.txt .
# RUN pip install --upgrade pip
# RUN pip install --no-cache /wheels/*
# RUN pip install gunicorn


# # copy entrypoint.prod.sh
# ADD ./docker/farmis_server/docker-entrypoint.prod.sh /docker-entrypoint.prod.sh
# RUN sed -i 's/\r$//g' /docker-entrypoint.prod.sh
# RUN chmod a+x /docker-entrypoint.prod.sh

# # copy project
# COPY ./farmis_server ${APP_HOME}

# # chown all the files to the app user
# RUN chown -R appuser:appgroup ${APP_HOME}

# # change to the app user
# # Switch to the non-privileged user to run the application.
# USER appuser

# # run entrypoint.prod.sh
# ENTRYPOINT ["/docker-entrypoint.prod.sh"]

# # Expose the port that the application listens on.
# EXPOSE 8000


###########
# BUILDER #
###########

# pull official base image
ARG PYTHON_VERSION=3.11.5
FROM python:${PYTHON_VERSION}-slim as builder

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

# set work directory
WORKDIR /app

# Download dependencies as a separate step to take advantage of Docker's caching.
RUN apt-get update && apt-get install -y --no-install-recommends gcc
RUN pip install --upgrade pip
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=bind,source=./farmis_server/requirements.txt,target=requirements.txt \
    python -m pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements.txt

# Copy the source code into the container.
COPY ./farmis_server .

###########
# FINAL #
###########

# pull official base image
FROM python:${PYTHON_VERSION}-slim

# create directory for the app user
RUN mkdir -p /home/app

# Create a non-privileged user that the app will run under.
ARG UID=10001
RUN addgroup --system appgroup && adduser \
    --system \
    --group \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir ${APP_HOME}
RUN mkdir ${APP_HOME}/staticfiles
RUN mkdir ${APP_HOME}/mediafiles
WORKDIR ${APP_HOME}

# install dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    netcat-openbsd \
    postgresql-client  # Install PostgreSQL client tools

COPY --from=builder /app/wheels /wheels
COPY --from=builder /app/requirements.txt .
RUN pip install --upgrade pip
RUN pip install --no-cache /wheels/*
RUN pip install gunicorn

# copy entrypoint.prod.sh
ADD ./docker/farmis_server/docker-entrypoint.prod.sh /docker-entrypoint.prod.sh
RUN sed -i 's/\r$//g' /docker-entrypoint.prod.sh
RUN chmod a+x /docker-entrypoint.prod.sh

# copy project
COPY ./farmis_server ${APP_HOME}

# chown all the files to the app user
RUN chown -R appuser:appgroup ${APP_HOME}

# change to the app user
USER appuser

# run entrypoint.prod.sh
ENTRYPOINT ["/docker-entrypoint.prod.sh"]

# Expose the port that the application listens on.
EXPOSE 8000
